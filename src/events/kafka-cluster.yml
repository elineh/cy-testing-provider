# This docker-compose file can be used to start Kafka and its dependencies locally.
# If Kafka is not running, movie CRUD operations will still work but the movie events will not be published.

version: '3.8' # Version of Docker Compose file format

services:
  kafka:
    image: bitnami/kafka:latest # Kafka Docker image from Bitnami repository (multi-architecture support).
    platform: linux/amd64 # Ensures compatibility with AMD64 architecture to avoid ARM issues on Apple Silicon.
    ports:
      - '29092:29092' # Maps external port 29092 to Kafka's listener for external access.
    expose:
      - '29092' # Makes port 29092 available for other containers in the same Docker network.
    environment:
      KAFKA_BROKER_ID: 1 # Unique identifier for this Kafka broker instance.
      KAFKA_CFG_PROCESS_ROLES: broker,controller # Enable KRaft mode with broker and controller roles
      KAFKA_CFG_NODE_ID: 1 # Node ID for KRaft mode
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093 # Controller quorum configuration
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER # Controller listener name

      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,EXTERNAL://:29092,CONTROLLER://:9093
      # Defines Kafka's listeners:
      # - PLAINTEXT listener for internal Docker communication.
      # - EXTERNAL listener for connections outside the container via port 29092.
      # - CONTROLLER listener for KRaft mode controller communication.

      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      # Specifies how Kafka advertises its listeners to clients:
      # - Internal Docker network: 'PLAINTEXT://kafka:9092' (accessible by other containers).
      # - External access: 'EXTERNAL://localhost:29092' (accessible by external clients).
      # Note: CONTROLLER listener is not advertised as it's only for internal controller communication.

      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      # Maps the listeners (PLAINTEXT, EXTERNAL, and CONTROLLER) to the PLAINTEXT security protocol.
      # This avoids encryption/authentication and keeps it simple for local development.

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Specifies that Kafka brokers communicate with each other using the PLAINTEXT listener.

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # Sets the replication factor for Kafka's internal `__consumer_offsets` topic.
      # Since it's a single-node setup, replication is set to 1.

    volumes:
      - kafka_data:/var/lib/kafka/data
      # Maps a persistent volume to store Kafka logs and data, preventing data loss on restarts.

  init-kafka:
    image: bitnami/kafka:latest # Kafka image, the same as the main Kafka broker
    depends_on:
      - kafka # Will run after the Kafka broker is up and running
    entrypoint: ['/bin/sh', '-c'] # Defines the shell entry point for this container
    command: |
      "
      # Wait for Kafka to be ready
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list

      # Create the 'movies' topic
      echo -e 'Creating kafka topics'
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic movies --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

  kafka-ui:
    image: provectuslabs/kafka-ui:latest # Kafka UI tool for managing and viewing topics and brokers
    ports:
      - 8085:8080 # Exposes the Kafka UI on port 8085 (localhost:8085 in the browser)
    environment:
      KAFKA_CLUSTERS_0_NAME: local # Names the Kafka cluster in the UI as 'local'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092 # Connects the UI to the Kafka broker
      DYNAMIC_CONFIG_ENABLED: 'true' # Enables dynamic configuration in the UI

volumes:
  kafka_data:
    driver: local # Define a Docker volume to persist Kafka data
